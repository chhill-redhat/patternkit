<?php

/**
 * @file
 * Install file for patternkit module.
 */

use Drupal\Component\Serialization\Yaml;
use Drupal\Core\Cache\Cache;
use Drupal\Core\Entity\ContentEntityType;
use Drupal\Core\Entity\EntityAccessControlHandler;
use Drupal\Core\Entity\EntityListBuilder;
use Drupal\Core\Entity\EntityViewBuilder;
use Drupal\Core\Entity\Sql\SqlContentEntityStorage;
use Drupal\Core\Entity\Sql\SqlContentEntityStorageSchema;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\patternkit\Commands\PatternkitCommands;
use Drupal\patternkit\Entity\Pattern;
use Drupal\patternkit\Entity\PatternRouteProvider;
use Drupal\views\EntityViewsData;

/**
 * Implements hook_requirements().
 */
function patternkit_requirements($phase) {
  $requirements = [];

  if (version_compare(\Drupal::VERSION, 8.9, '<')) {
    $requirements['patternkit_drupal_version'] = [
      'title' => t('Patternkit Drupal Version'),
      'value' => 8.9,
      'description' => t('Running a Drupal version prior to 8.9 can cause issues with schema, caching, and display. Upgrade as soon as possible, or see the README.md for patches you should apply.'),
      'severity' => REQUIREMENT_WARNING,
    ];
  }

  return $requirements;
}

/**
 * Allows upgrading from dev version automatically.
 *
 * @throws \Drupal\Core\Entity\Exception\EntityTypeIdLengthException
 */
function patternkit_update_8001(&$sandbox) {
  // Installs new entities if necessary.
  $entity_definition_update_manager = \Drupal::entityDefinitionUpdateManager();
  if (!$entity_definition_update_manager->getEntityType('patternkit_pattern')) {
    $pattern_entity_type = new ContentEntityType([
      'id' => 'patternkit_pattern',
      'class' => Pattern::class,
      'label' => t('Pattern'),
      'label_collection' => t('Pattern Libraries'),
      'label_plural' => t('Patterns'),
      'label_singular' => t('Pattern'),
      'label_count' => [
        'singular' => t('@count patterns'),
        'plural' => t('@count custom blocks'),
      ],
      'admin_permission' => 'administer blocks',
      'base_table' => 'pattern',
      'revision_table' => 'pattern_revision',
      'entity_keys' => [
        'id' => 'id',
        'hash' => 'hash',
        'assets' => 'assets',
        'category' => 'category',
        'label' => 'name',
        'library' => 'library',
        'libraryPluginId' => 'libraryPluginId',
        'path' => 'path',
        'revision' => 'revision',
        'schema' => 'schema',
        'template' => 'template',
        'uuid' => 'uuid',
        'version' => 'version',
      ],
      'revision_metadata_keys' => [
        'revision_default' => 'revision_default',
        'revision_user' => 'revision_user',
        'revision_created' => 'revision_created',
        'revision_log_message' => 'revision_log_message',
      ],
      'handlers' => [
        'access' => EntityAccessControlHandler::class,
        'storage' => SqlContentEntityStorage::class,
        'storage_schema' => SqlContentEntityStorageSchema::class,
        'view_builder' => EntityViewBuilder::class,
        'views_data' => EntityViewsData::class,
        'route_provider' => [
          'html' => PatternRouteProvider::class,
        ],
        'list_builder' => EntityListBuilder::class,
      ],
      'links' => [
        'canonical' => '/patternkit/{patternkit_pattern}',
        'collection' => '/patternkit',
      ],
      'translatable' => FALSE,
    ]);
    $entity_definition_update_manager->installFieldableEntityType($pattern_entity_type, Pattern::baseFieldDefinitions($pattern_entity_type));
  }

  // Upgrades existing patterns.
  $command = new PatternkitCommands();
  $command->setLogger(\Drupal::logger('patternkit'));
  $command->devUpdate();

  // Clears caches.
  $user_caches = [
    'apcu_clear_cache',
    'wincache_ucache_clear',
    'xcache_clear_cache',
    'opcache_reset',
  ];
  array_map('call_user_func', array_filter($user_caches, 'is_callable'));
  foreach (Cache::getBins() as $bin) {
    $bin->deleteAll();
  }
  \Drupal::service('page_cache_kill_switch')->trigger();
  drupal_flush_all_caches();
}

/**
 * Adds proper revision metadata keys to Patternkit.
 */
function patternkit_update_8002(&$sandbox) {
  $entity_definition_update_manager = \Drupal::entityDefinitionUpdateManager();
  $entity_type = $entity_definition_update_manager->getEntityType('patternkit_pattern');
  $metadata_keys = $entity_type->get('revision_metadata_keys');
  $metadata_keys = is_array($metadata_keys) ? $metadata_keys : [];
  $metadata_keys = [
    'revision_default' => 'revision_default',
    'revision_user' => 'revision_user',
    'revision_created' => 'revision_created',
    'revision_log_message' => 'revision_log_message',
  ] + $metadata_keys;
  $entity_type->set('revision_metadata_keys', $metadata_keys);
  $entity_definition_update_manager->updateEntityType($entity_type);
}

/**
 * Adds reverse lookup pattern id field for Patternkit reusable blocks.
 */
function patternkit_update_8003(&$sandbox) {
  $entity_definition_update_manager = \Drupal::entityDefinitionUpdateManager();
  $entity_type = $entity_definition_update_manager->getEntityType('patternkit_block');

  $entity_keys = $entity_type->get('entity_keys');
  $entity_keys['pattern'] = 'pattern_id';
  $entity_type->set('entity_keys', $entity_keys);

  $pattern_id_field_definition = BaseFieldDefinition::create('string')
    ->setLabel(t('Patternkit Pattern Derivative ID'))
    ->setDescription(t('The machine name of the Patternkit pattern.'));
  $entity_definition_update_manager
    ->installFieldStorageDefinition('pattern_id',
  'patternkit_block', 'patternkit', $pattern_id_field_definition);
}

/**
 * Sets default values for new json-editor settings.
 */
function patternkit_update_8004(&$sandbox) {
  $config_key = 'patternkit.settings';
  $module_path = drupal_get_path('module', 'patternkit');
  $config_install_path = file_get_contents($module_path . '/config/install/' . $config_key . '.yml');
  $config_install = Yaml::decode($config_install_path);

  $config_current = \Drupal::configFactory()->getEditable($config_key);
  $new_keys = [
    'patternkit_json_editor_use_shadow_dom',
    'patternkit_json_editor_wysiwyg',
    'patternkit_json_editor_ckeditor_toolbar',
  ];
  $changed = FALSE;
  foreach ($new_keys as $new_key) {
    if (is_null($config_current->get($new_key))) {
      $config_current->set($new_key, $config_install[$new_key]);
      $changed = TRUE;
    }
  }

  if ($changed) {
    $config_current->save();
  }
}
